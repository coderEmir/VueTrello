export interface KoaControllerOptions {
    controllers: Array<string | Function>;
    basePath?: string;
    versions?: Array<number | string> | {
        [key: string]: string | boolean;
    };
    disableVersioning?: boolean;
    router: any;
    flow?: Array<Function>;
    errorHandler?: Function;
}
export declare let options: KoaControllerOptions;
export declare const metadata: {
    controllers: {};
};
export interface ControllerCodex {
    [k: string]: {
        actions: {
            [ak: string]: {
                flow?: Array<Function>;
                verb: string;
                path: string;
                target: Function;
                argumentTypes?: Array<any>;
            };
        };
        path: string | string[];
        class: any;
    };
}
export declare function getControllers(): ControllerCodex;
export declare const controllers: {};
/**
 *
 * @param app - Koa instance
 * @param params - KoaControllerOptions
 */
export declare const bootstrapControllers: (app: any, params: KoaControllerOptions) => Promise<void>;
export * from "class-validator";
export { Body, Controller, Ctx, Delete, Flow, Get, Header, Params, Patch, Post, Put, Query, Req, Res, Session, State, Version } from "./decorators";
